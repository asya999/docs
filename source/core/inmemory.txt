.. _storage-inmemory:

========================
In-Memory Storage Engine
========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. include:: /includes/fact-inmemory-beta.rst

Starting in MongoDB Enterprise 3.2, an in-memory storage engine is
available in the 64-bit builds for beta-testing purposes. Other than
some metadata and diagnostic data, the in-memory storage engine does
not maintain any on-disk data. By avoiding disk I/O, the in-memory
storage engine allows for more predictable latency of database
operations.

.. _inmemory-specify-storage-engine:

Specify In-Memory Storage Engine
--------------------------------

To select the in-memory storage engine, specify:

- ``inMemory`` for the :option:`--storageEngine` option, or the
  :setting:`storage.engine` setting if using a configuration file.

- ``--dbpath``, or :setting:`storage.dbPath` if using a configuration
  file. Although the in-memory storage engine does not write data to
  the filesystem, it maintains in the ``--dbpath`` small metadata files
  and diagnostic data as well temporary files for building large
  indexes.

For example, from the command line:

.. code-block:: sh

   mongod --storageEngine inMemory --dbpath <path>

Or, if using the :doc:`YAML configuration file format
</reference/configuration-options>`:

.. code-block:: yaml

   storage:
      engine: inMemory
      dbPath: <path>

See :ref:`cli-mongod-inmemory` for configuration options specific to this storage engine.

.. warning::
   The in-memory storage engine does not persist data after process shutdown.

.. _inmemory-concurrency:

Concurrency
-----------

The in-memory storage engine uses *document-level* concurrency control for write
operations. As a result, multiple clients can modify different
documents of a collection at the same time.

.. _inmemory-durability:

Durability
----------

The in-memory storage engine is non-persistent and does not write data
to a persistent storage. As such, the concept of :term:`journal` or
waiting for data to become :term:`durable` does not apply to the
in-memory storage engine. 

Write operations that specify a write concern :writeconcern:`journaled
<j>` are acknowledged immediately. When an :program:`mongod` instance
shuts down, either as result of the :dbcommand:`shutdown` command or
due to a system error, recovery of in-memory data is impossible.
